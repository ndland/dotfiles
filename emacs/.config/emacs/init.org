#+TITLE: Emacs Configuration
#+AUTHOR: A Literate Emacs User
#+DESCRIPTION: A literate Emacs configuration file. This file can be tangled to generate a vanilla init.el.
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Introduction

This is a literate Emacs configuration file, written in Org-mode. This approach allows for detailed documentation and an organized, readable configuration.

Automatic Tangle on Save

We will use the built-in org-babel-tangle-file function to automatically tangle this file to init.el whenever it is saved.

This code block will be evaluated when Emacs starts up. It sets up a hook that will automatically tangle the file.

#+BEGIN_SRC emacs-lisp
  ;; Tangle this file to init.el on save.
  (defun my/org-babel-tangle-on-save ()
    "Tangle the current Org buffer to init.el on save."
    (when (string-equal (buffer-file-name) (expand-file-name "~/.config/emacs/init.org"))
      (org-babel-tangle-file (buffer-file-name)
  			   (expand-file-name "~/.config/emacs/init.el"))))

  (add-hook 'after-save-hook #'my/org-babel-tangle-on-save)
#+END_SRC

* Package Management

A good Emacs configuration starts with a solid package manager. We'll set up use-package and the MELPA package archive.

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

** Packages

*** Evil

#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init))
#+end_src

*** Color
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :straight t
    :config
    (load-theme 'catppuccin :no-confirm)
    (setq catppuccin-flavor 'macchiato)
    (catppuccin-reload))
#+end_src

*** Completion

#+begin_src emacs-lisp
  ;; Auto completion example
  (use-package corfu
    :straight t
    :custom
    (corfu-auto t)
    :init
    (global-corfu-mode))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Available since Emacs 29 (Use `dabbrev-ignored-buffer-regexps' on older Emacs)
    (add-to-list 'dabbrev-ignored-buffer-modes 'authinfo-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :custom
    ;; (orderless-style-dispatchers '(orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion))))
    (completion-category-defaults nil) ;; Disable defaults, use our settings
    (completion-pcm-leading-wildcard t)) ;; Emacs 31: partial-completion behaves like substring

  ;; Enable Vertico.
  (use-package vertico
    :straight t
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :straight t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

*** Git

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))

  (use-package forge
    :straight t
    :after magit)
#+end_src

* Further Configuration

This is where you can add more configuration sections for things like themes, keybindings, and modes for specific languages.

For example, a section for a new package:

#+BEGIN_SRC emacs-lisp
  ;; Example: Configure the "flycheck" package for syntax checking.
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode))
#+END_SRC
